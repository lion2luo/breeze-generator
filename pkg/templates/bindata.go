// Code generated for package templates by go-bindata DO NOT EDIT. (@generated)
// sources:
// data/java_client.xml
// data/java_pom.xml
// data/java_server.xml
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataJava_clientXml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x4f\x6f\xe2\x38\x14\x3f\x2f\x9f\x22\xb2\x38\x2e\x86\x52\xad\xb4\x42\xa4\x95\xb6\xd2\x9e\x3a\x52\x55\x3a\xd2\xdc\x90\x71\x1e\xc6\x22\xb1\x33\xb6\x29\x01\x26\xdf\x7d\x64\xe7\x4f\x03\xad\x43\xd2\x8e\x6f\xf8\xfd\xfe\x61\xbf\xbc\x64\x7e\x9f\x25\x71\xf0\x0a\x4a\x73\x29\x42\x74\x83\x27\x28\x00\x41\x65\xc4\x05\x0b\xd1\xf7\x97\xff\x47\xff\xa2\xfb\xbb\xc1\x7c\x05\x44\xe8\x20\x4b\x62\xa1\x43\xb4\x31\x26\x9d\x8d\xc7\xfb\xfd\x1e\xeb\x54\x71\xc1\xd6\x8a\x24\xb0\x97\x6a\x8b\xa5\x62\x63\x4d\x37\x90\x90\xb1\xa3\xa0\x41\x50\x2c\x47\x9d\x65\x9a\x9f\xd1\xf7\xb7\x8e\x31\x9d\x4c\x6e\xc6\x3f\xbe\x3d\x2e\x1c\x73\xc4\x85\x36\x44\x50\x40\x25\x8b\x4a\x61\x20\x33\x5d\x8d\x4b\xf8\x85\xf5\x1e\xf8\x4a\xd6\x12\x24\xe5\xd8\xed\x60\x2a\x93\x8a\xe8\x36\x2e\x68\x89\x34\x44\xb4\xd3\x1c\xe4\x8d\xa6\xf9\xac\x28\x3c\x4a\x4a\x8c\x3b\xd6\x1e\x07\x56\xc9\xd8\xd5\x83\x36\x2e\x00\x23\xf7\x63\x34\xc5\xff\xe0\x4c\x47\xfd\xb5\xca\xa3\xfb\x34\xb1\x8a\x51\xfe\x6c\x09\xe2\xbf\x80\x5e\xe0\x5a\xfd\xaf\x2b\x68\x77\x49\xdd\x91\x56\x17\xdd\x0d\x1c\x61\xee\x76\x66\x0a\x18\xd7\x46\x1d\x02\x41\x12\x08\xd1\xe9\x84\x65\x6a\xaf\x57\x63\x57\x5f\xa6\x84\x6e\x09\x83\xa5\x2d\xe7\xf9\x73\x89\x46\xcd\xbf\x53\x2f\x05\xec\x49\x49\x23\xa9\x8c\x43\x34\x3c\x29\x58\x83\xc2\x57\x14\x71\x15\x00\xa7\x25\x75\xf6\x8e\x51\x41\x96\x15\x24\xcf\xf3\x8f\x13\x90\x28\x52\xa0\xf5\x27\xdc\x37\x52\x9b\x16\x67\x5b\xf6\xba\xa6\x52\x99\xcf\xfc\x61\xa9\xda\x2c\x6d\xd9\x6b\xa9\xe0\xe7\x0e\xb4\x79\xe1\x09\xc8\x9d\x09\xd1\xcd\x64\x32\xf1\x5e\x8a\xd3\x5b\x80\xb6\xd3\xf0\x8c\x71\x85\xf2\x0c\x46\x1d\x9e\x40\x71\x19\x85\xe8\xd6\xe1\xc7\xe7\xdd\x53\x5d\x48\xc0\xa3\xab\xbd\x53\xb5\x06\x2a\x5b\xcd\x61\xa6\x1f\x27\x48\xb8\x78\x88\x39\x08\xf3\x20\x85\x00\x5a\xcc\x9b\xae\x07\x9c\x70\xb1\xa4\x8e\xbd\xa4\x35\x5d\xbf\x3f\xe9\x12\xe3\xe0\x6f\x38\xef\x91\x27\x24\xfb\x42\x26\x92\xf5\xca\x64\xe1\x1d\x32\xc5\x92\x44\x2b\x12\xdb\xd7\x4a\xf7\x2c\x0d\x92\x37\x40\x03\xe3\x35\xdf\x90\x85\x51\xc4\x00\x3b\x74\xf7\xde\x10\xaf\xe5\x86\xd4\x4e\x17\x5d\xb6\x22\x9a\xd3\x67\xab\x0f\xaa\x4b\xa7\xfd\x67\xf1\xf5\x5d\xad\x39\xfb\x38\x7f\xb3\xd5\xbf\x38\xf9\xec\x4a\xeb\xd1\xd7\xf5\x41\xf0\x4a\x91\x34\x8d\x79\xf5\x9a\x1d\x9e\x34\xa8\x57\x4e\x01\x37\xb6\xb1\x93\xf2\x2b\x24\x32\xda\xc5\x3d\x7a\x82\x29\xb9\x4b\x5b\xf4\x5c\xfd\xcf\xc9\x5d\x8e\xaf\xee\xb3\xb3\xc9\xf3\xb6\x52\x09\x5b\x9a\x02\xe7\xed\x60\x77\xd6\x94\x82\xd6\x8f\x92\x75\x4f\x51\x50\x62\xc9\xbc\x01\x6a\x44\xab\x35\xdd\x00\xdd\x76\xb7\x75\x70\xaf\xa5\xab\xb6\xda\xed\x34\xb0\x63\x77\x3b\x07\xf7\xda\xb9\x6a\xab\x5d\xc2\x05\x3b\x2e\xf8\xb1\x47\x17\x3a\xca\x52\xf3\xa3\x7f\x30\xbd\x41\xde\x4d\x8b\xd3\x49\x11\xc1\x20\x18\x6e\xe1\xf0\x77\x30\x7c\x25\xf1\x0e\x82\x59\x18\xe0\xf2\xf9\xd1\x79\x7e\xfe\xe5\xd3\x1c\x28\x96\x14\xfc\x0a\xd6\x5c\x69\x33\x8d\xe5\x1e\x54\x9e\xa3\x80\x0b\x03\x6a\x4d\xa8\xfb\x32\x2a\x14\xed\x76\x73\x20\xb9\x4a\xcf\x71\x64\x23\x17\x89\x41\x44\x79\x3e\x98\x17\x9f\xbb\x77\xbf\x03\x00\x00\xff\xff\xb4\x08\xcb\xb5\xb8\x0c\x00\x00")

func dataJava_clientXmlBytes() ([]byte, error) {
	return bindataRead(
		_dataJava_clientXml,
		"data/java_client.xml",
	)
}

func dataJava_clientXml() (*asset, error) {
	bytes, err := dataJava_clientXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/java_client.xml", size: 3256, mode: os.FileMode(420), modTime: time.Unix(1581041512, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataJava_pomXml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x4f\x8f\xdb\x2e\x10\xbd\xe7\x53\x44\xd6\xef\x6a\x70\x92\xdf\x61\x15\x11\xf6\xd4\x4a\x95\x76\xd5\x4a\xfd\xa3\xde\x2a\x02\x13\x87\xad\x0d\x16\xe0\x8d\xdb\x68\xbf\x7b\x15\x30\x8e\xed\xd8\xa9\x9a\x13\x79\xbc\x99\x79\xf3\x86\x31\x79\x6c\xca\x62\xf9\x0a\xc6\x4a\xad\x76\xc9\x0a\x65\xc9\x12\x14\xd7\x42\xaa\x7c\x97\x7c\xfd\xf2\x3e\x7d\x48\x1e\xe9\x82\x54\x46\xbf\x00\x77\xcb\xa6\x2c\x94\xdd\x36\x56\xee\x92\xa3\x73\xd5\x16\xe3\xd3\xe9\x84\x4e\x1b\xa4\x4d\x8e\xd7\x59\xb6\xc2\xdf\x9f\x9f\x3e\xf3\x23\x94\x2c\x95\xca\x3a\xa6\x38\x24\x8b\x65\xfc\xf9\xf0\x2e\xb4\x64\xaf\xa0\x10\xab\x18\x3f\x82\x4f\xf0\xe9\xe3\x33\xfe\x1f\x65\x28\xeb\x87\x58\xb9\xb5\x3e\xe1\x93\xe6\xcc\x79\x99\x7f\x8d\x5f\xce\x31\x1a\x2b\x02\x98\x7a\x1e\x6a\xac\x48\xa8\x2f\x46\x4a\x2d\xa0\xf8\x16\x9c\xa0\xfe\x96\xe0\x01\x16\x68\xb9\xd1\x75\xf5\x41\xd0\xf3\x19\xf9\xe3\x0f\x29\xde\xde\x08\x8e\x70\x20\x31\xe3\xe4\x81\x71\x17\x78\xf1\x5f\x4b\xed\x5d\x06\x76\x6b\xff\x85\xda\x1e\x2f\xb4\x88\x2e\x02\xa9\x32\xba\x02\xe3\x24\x58\xda\x99\x13\xc7\x82\xf6\xb5\x2c\x04\xb2\xba\x36\x1c\xde\xb5\xe3\xa3\x7e\x7a\x04\xdf\xe5\x5c\x53\xed\x0d\xc0\x6f\x88\x02\x68\x86\x56\x68\x43\xf0\x08\x0d\x52\x70\x5f\x4b\x80\x04\x54\xa0\x04\x28\x3e\xd4\xd7\xc1\xbf\xae\xe0\xc0\x45\xae\x4b\x74\x02\xb9\xd7\x23\x07\x3b\x62\xcf\xac\xa0\x25\xe5\xda\xc0\xad\x89\x5d\x40\x94\xfa\xdf\x79\xa8\xbd\xef\x68\x47\xc6\x63\x81\x3d\xa4\xd7\x9d\xb7\xae\x6f\x7b\x51\xe7\x52\xd9\x51\xe5\x80\x0e\xc1\x71\x0f\xe1\xed\x71\x5d\x56\xb2\x00\x93\x86\x90\xf9\x6e\x06\x1d\x6d\xd0\x6a\xa2\x87\x8e\xc6\xb5\x3a\xc8\xbc\x36\x7e\x47\x6e\xef\x3d\x27\x4c\x9f\xae\xd0\x03\xc1\xed\x79\x9a\xe8\x98\xc9\xc1\x05\x62\x7b\xbe\xad\x88\xef\x94\x24\x78\xca\x8e\x79\x8f\xe2\xf4\xb5\xc9\xe3\xbe\x86\xe5\x6d\xbd\x9e\x79\x1f\xd3\xfe\x86\xd6\xfe\xcd\xdd\x35\x5a\xdf\xf7\x17\x1a\xe0\xf5\xa5\x51\x3b\xe3\x59\x47\x98\xbe\xf7\x1c\x29\x28\x73\x8e\xf1\x63\xab\xd1\x12\x2c\x27\x54\x5d\x6d\xd1\xac\x98\xa9\x37\xe0\xd0\x17\x66\x52\xa5\xd3\x83\x36\x3f\x09\xf6\xc8\x7c\x52\x7c\x27\x2b\xc1\x77\xda\xe8\x5d\x8e\x1f\xff\xcd\xb8\x23\x62\xe3\x62\xb5\x4b\xd4\x7d\x90\xe8\x9f\x00\x00\x00\xff\xff\xfc\x52\xd9\xfc\x7c\x06\x00\x00")

func dataJava_pomXmlBytes() ([]byte, error) {
	return bindataRead(
		_dataJava_pomXml,
		"data/java_pom.xml",
	)
}

func dataJava_pomXml() (*asset, error) {
	bytes, err := dataJava_pomXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/java_pom.xml", size: 1660, mode: os.FileMode(420), modTime: time.Unix(1581036781, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataJava_serverXml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x5f\x6f\xda\x30\x10\x7f\x1e\x9f\xc2\xb2\xfa\x38\x0c\xa5\x9a\x34\x21\xd2\x4a\xab\xb4\xa7\x4e\xaa\x4a\xa7\xed\x2d\x72\x9d\x23\x58\x24\x76\x76\x36\x4d\x0a\xf3\x77\x9f\xec\x24\x40\x19\xa1\xd0\xcd\x6f\xe4\x7e\x7f\xce\x97\xbb\x0b\x93\x9b\x2a\xcf\xc8\x33\xa0\x91\x5a\x45\xf4\x92\x0d\x29\x01\x25\x74\x22\x55\x1a\xd1\xef\x8f\x5f\xfb\x9f\xe9\xcd\x75\x6f\xf2\x04\x5c\x19\x52\xe5\x99\x32\x11\x9d\x5b\x5b\x8c\x07\x83\xb2\x2c\x99\x29\x50\xaa\x74\x86\x3c\x87\x52\xe3\x82\x69\x4c\x07\x46\xcc\x21\xe7\x83\x40\xa1\x3d\x52\x9f\x40\x1d\x57\x46\xbe\xa2\x97\x57\x81\x31\x1a\x0e\x2f\x07\x3f\xbf\xdd\x4d\x03\xb3\x2f\x95\xb1\x5c\x09\xd8\x23\xe7\xda\x72\xb5\xa1\xf3\x42\xb2\x12\xe4\x93\x66\x42\xe7\xad\x67\x80\x6c\x69\x46\x8e\xeb\xc0\x9d\x16\xdc\x86\x1b\x9e\x91\x7b\x2b\xe3\xcf\x19\xb4\x41\x0d\xe8\x87\x1f\xfd\x11\xfb\xc4\x2a\x93\x04\xad\x0f\x5b\xa1\xee\xec\x4f\x47\x7a\x5d\x7a\xdd\x0b\x84\x49\x78\x32\x46\x48\xa5\xb1\xf8\x42\x14\xcf\x21\xa2\xeb\x35\xd3\x85\xbf\xb7\x61\x21\x1e\x17\x5c\x2c\x78\x0a\xb1\x0f\x3b\xf7\xd0\xa0\xe9\xee\x4d\x37\x07\x21\xbd\x47\x6d\xb5\xd0\x59\x44\x2f\xd6\x06\xf0\x59\x0a\x60\x6f\x68\xb2\x36\x05\x56\x34\xe4\xf1\x5f\x8c\x16\x12\xb7\x10\xe7\xdc\xe1\x1c\x78\x92\x20\x18\xf3\x2e\xff\xb9\x36\xf6\x88\xb7\x0f\x77\xfa\x16\x1a\xed\xfb\x2e\xad\xf1\x98\xa9\x0f\x77\x9a\x22\xfc\x5a\x82\xb1\x8f\x32\x07\xbd\xb4\x11\xbd\x1c\x0e\x87\x94\xb4\xdc\x29\x18\x3f\xa3\xaf\xa2\x3b\xe1\x07\xb0\xf8\x72\x0f\x28\x75\x12\xd1\xab\x10\x1b\xbc\xee\x8d\xb6\xd8\x44\x26\x6f\x76\x46\xfb\xe2\x69\xd3\x48\x01\x33\x3a\x9c\x76\xce\xab\x1f\x1a\x17\x80\x8f\x73\x04\x7e\x48\xdb\x57\x11\x30\xce\x79\x15\x97\x01\x19\xdb\x00\x35\x5d\x95\xc8\xa5\x3a\x51\x52\xaa\x53\x25\x79\x35\x0d\x9c\x5b\xad\x14\x88\x7a\x19\x1c\xcb\x54\x6c\x70\x1b\xcd\xbd\x82\x3e\x71\x23\xc5\xb4\xee\x90\x53\x8a\xfa\x65\x07\x7f\xab\xd5\x4c\xa6\x87\x53\x6d\x86\x2f\xbc\xd6\x7f\x9c\x61\x7f\xcc\x9c\x23\xdc\xce\xb9\x52\x90\x45\xd4\xe2\x12\xba\xb1\x50\xd5\x9d\x7f\x62\x7b\x8c\x4f\x9f\x90\x5a\x39\x3e\x3c\x1f\x4d\xd9\x8f\x4e\x87\x3f\xbc\x28\x32\xd9\x6e\xf2\xad\xf7\xce\x63\x16\xec\xba\x15\x72\x9d\x2c\x33\x38\x67\xb4\x53\xd4\xcb\xe2\x88\x62\x88\xff\x4f\x41\x2e\x04\x18\x73\xa7\xd3\x73\x44\x6b\x52\xa6\xd3\xce\xe2\x6e\x10\x47\x2b\xbc\x34\x90\xae\xce\x31\x0e\x84\x4e\xd3\x10\x3d\x6a\x98\x4b\x95\xae\xa6\x72\x75\xd6\x3b\x09\xa4\xd8\xc8\x15\x74\x3a\x6f\x21\x6e\x7f\x7c\xd7\x6b\xe4\x2a\x05\x72\xb1\x80\x97\x8f\xe4\xe2\x99\x67\x4b\x20\xe3\x88\xb0\xc6\xde\x10\xe7\xea\x39\xf7\x9f\xf0\x66\xb2\x3d\x98\xfc\x26\x33\x89\xc6\x8e\x32\x5d\x02\x3a\x47\x89\xc8\xf8\xfe\xd7\xc9\x03\x9d\x63\x32\x2f\x32\xe7\x57\x30\xd9\x2e\x8c\x06\x44\x10\x66\xdd\x92\x52\x59\xc0\x19\x17\xe1\xf3\x5d\x27\xe7\x1f\xef\x2e\x9b\x10\x39\x77\xd5\x90\x26\x97\xf5\x1a\x54\xe2\x5c\x6f\x52\xff\x5b\xb9\xfe\x13\x00\x00\xff\xff\xf3\x8a\xcd\x4d\x02\x0a\x00\x00")

func dataJava_serverXmlBytes() ([]byte, error) {
	return bindataRead(
		_dataJava_serverXml,
		"data/java_server.xml",
	)
}

func dataJava_serverXml() (*asset, error) {
	bytes, err := dataJava_serverXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/java_server.xml", size: 2562, mode: os.FileMode(420), modTime: time.Unix(1581041503, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/java_client.xml": dataJava_clientXml,
	"data/java_pom.xml":    dataJava_pomXml,
	"data/java_server.xml": dataJava_serverXml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"java_client.xml": &bintree{dataJava_clientXml, map[string]*bintree{}},
		"java_pom.xml":    &bintree{dataJava_pomXml, map[string]*bintree{}},
		"java_server.xml": &bintree{dataJava_serverXml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
